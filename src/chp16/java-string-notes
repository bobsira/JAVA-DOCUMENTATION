A string is a sequence of characters

But, unlike many other languages that implement
strings as character arrays, Java implements strings as objects of type String

When you create a String object, you are creating a string that
cannot be changed.

That is, once a String object has been created, you cannot change the
characters that comprise that string.

You can still perform all types of string operations. The difference is that
each time you need an altered version of an existing string, a new String object is created
that contains the modifications. The original string is left unchanged. This approach is used
because fixed, immutable strings can be implemented more efficiently than changeable ones

For those cases in which a modifiable string is desired, Java provides two options: StringBuffer
and StringBuilder. Both hold strings that can be modified after they are created.

The String, StringBuffer, and StringBuilder classes are defined in java.lang. Thus, they
are available to all programs automatically. All are declared final, which means that none of
these classes may be subclassed.

All three implement the CharSequence interface.

One last point: To say that the strings within objects of type String are unchangeable means
that the contents of the String instance cannot be changed after it has been created. However,
a variable declared as a String reference can be changed to point at some other String object
at any time.

The String Constructors
To create an empty String, you call the default
constructor. For example,
String s = new String();
will create an instance of String with no characters in it.


Frequently, you will want to create strings that have initial values.
To create a String initialized by an array
of characters, use the constructor shown here:
String(char chars[ ])
Here is an example:
char chars[] = { 'a', 'b', 'c' };
String s = new String(chars);
This constructor initializes s with the string “abc”.

You can specify a subrange of a character array as an initializer using the following
constructor:
String(char chars[ ], int startIndex, int numChars)
Here, startIndex specifies the index at which the subrange begins, and numChars specifies
the number of characters to use. Here is an example:
char chars[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
String s = new String(chars, 2, 3);
This initializes s with the characters cde.


You can construct a String object that contains the same character sequence as another
String object using this constructor:
String(String strObj)
Here, strObj is a String object

// Construct one String from another.
class MakeString {
public static void main(String args[]) {
char c[] = {'J', 'a', 'v', 'a'};
String s1 = new String(c);
String s2 = new String(s1);
System.out.println(s1);
System.out.println(s2);
}
}

Even though Java’s char type uses 16 bits to represent the basic Unicode character set,
the typical format for strings on the Internet uses arrays of 8-bit bytes constructed from the
ASCII character set. Because 8-bit ASCII strings are common, the String class provides
constructors that initialize a string when given a byte array.

String(byte asciiChars[ ])
String(byte asciiChars[ ], int startIndex, int numChars)

Here, asciiChars specifies the array of bytes. The second form allows you to specify a
subrange. In each of these constructors, the byte-to-character conversion is done by using
the default character encoding of the platform.

// Construct string from subset of char array.
class SubStringCons {
public static void main(String args[]) {
byte ascii[] = {65, 66, 67, 68, 69, 70 };
String s1 = new String(ascii);
System.out.println(s1);
String s2 = new String(ascii, 2, 3);
System.out.println(s2);
}
}
This program generates the following output:
ABCDEF
CDE

NOTE The contents of the array are copied whenever you create a String object from an array. If you
modify the contents of the array after you have created the string, the String will be unchanged.